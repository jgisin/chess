exit
self.board[row][0][column].is_a? Piece
column
row
step
puts b.find_piece(row, column)
b.find_piece(row, column)
4
exit
b.display_board
n
b.display_board
g.b.display_board
exit
n
exit
n
check?(test_board(b), turn)
n
coord[1].to_i
coord[0].to_i
test_board(b).board
black
exit
n
test.board
n
step
exit
current_board.board[row][0][column]
exit
self
self.color
board[test_row[index]][0][column].color
n
column == end_column
test_row[index] == end_row
n
column
test_row[index]
n
column
test_row[index]
n
column
test_row[index]
index
n
test_column
test_row
step
n
step
n
step
next
step
exit
test_column
test_collumn
test_row
step
n
step
n
step
n
step
n
step
exit
self.row
self.column
test_row
test_column
column
test_row[index]
step
n
test_column.length
test_row.length
n
step
test_bishop.check_collision(board, end_row, end_column)
test_bishop.column
test_bishop.row
n
end_column
self.column
end_row
self.row
n
step
n
step
exit
column
test_row[index]
n
step
n
step
n
step
next
step
next
step
exit
next
end_column
column
next
index
column
next
end_column
column
end_row
test_row[index]
board[test_row[index]][0][column].is_a? Piece
board[test_row[index]][0][column].is_a Piece
step
board[test_row[index]][0][column].is_a Piece
next
step
next
step
next
step
next
step
next
step
c
b
back
board[test_row[index]]
board[test_row[index]
end_column
end_row
next
index
test_row
test_column
column
next
test_column.length
test_row.length
test_column
next
test_column
next
end_column
self.column
test_column
next
test_row
next
test_row
next
test_row
next
end_row
self.row
step
next
step
next
step
next
step
next
step
continue
